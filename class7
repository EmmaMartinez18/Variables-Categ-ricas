###   Class 7

#####################   GRAFICACION BASICA

require(gplots)
require(venneuler)

x11()
xt <- rt(100,3) #   Valores aleatorios distribuidos como una t-student
hist(xt)
plot(density(xt))
sample(LETTERS,10)

help("lappy")
tt <- lapply(1:3, function(x) sample(LETTERS,10))
View(tt)
names(tt) <- c("Lucia", "Katia", "Elena")
tt

venn(tt)  #   Diagrama de Venn
tt <- lapply(1:4, function(x) sample(letters,10))
names(tt) <- paste("Lista", 1:4) # Nombra a cada conjunto como lista 1 hasta lista 4
venn(tt)

intersectMatrix <- function(tt) {
  allElements <- unique(unlist(tt)) 
  outMat <- sapply(1:length(tt), function(i) allElements%in%tt[[i]]) 
  rownames(outMat) = allElements 
  colnames(outMat) = names(tt) 
  return(outMat)
}

xx <- intersectMatrix(tt)
print(xx[1:4,])
plot(venneuler(xx))

tt <- lapply(1:5, function(x) sample(LETTERS,15))
names(tt) <- sapply(tt, function(x) paste(sort(x), collapse = ""))
help("collapse")
venn(tt)
plot(xx)
plot(xt, axes = F)
plot(xt, type = "p")
plot(xt, type = "l")
plot(xt, type = "b") #  No hay Intersepciones con puntos y lineas
plot(xt, type = "o") #  Intersepciones con puntos y lineas
plot(xt, type = "h") #  Rectas Verticales
plot(xt, type = "n")
plot(xt, type = "h", xlab = "Eje x", ylab = "Eje y", main = "Titulo Aqui", sub = "Subtitulo")

View(cars)
attach(cars)
speed
plot(cars, type = "n", xlab = "Velocidad (mph)", ylab = "Distancia (ft)")
points(speed[speed < 15], dist[speed < 15], pch = "s", col = "blue")
points(speed[speed >= 15], dist[speed >= 15], pch = 25, col = "gray")
lines(lowess(cars), col = "red")
legend(5, 120, pch = c("s","f"), col = c("blue", "gray"), legend = c("Lento", "Rapido"))


#####################   FUNCIONES
F_a_C <-  function(temp_F)

{
  temp_C <- (5/9)*((temp_F)-32)
  return(temp_C)
}

#   Punto de ebullicion del agua
F_a_C(212)
#   Punto de congelacion del agua
F_a_C(32)


C_a_K <- function(temp_C)
{
  temp_K <- temp_C + 273.15
  return(temp_K)
}




F_a_K <- function(temp_F)
{
  temp_C <- F_a_C(temp_F)
  temp_K <- C_a_K(temp_C)
  return(temp_K)
}



envolver <- function(original,envoltorio)
{
  respuesta <- c(envoltorio,original,evoltorio)
  return(respuesta)
}

x <- c("Este mensaje esta en asteriscos")
x
y <- c("***")
y


exterior <- function (v)
{
  primero <- v[1]
  ultimo <- v[length(v)]
  respuesta <- c(primero, ultimo)
  return (respuesta)
}

exterior(1:10)

input_1 = 20
miSuma <- function(input_1, input_2=10)
{
  output<-input_1+input_2
  return(output)
}
miSuma(input_1=1,3)

miSuma(3)

miSuma(input_2=3) # Marca error

centrar<-function(datos,centro)
{
  nuevos_datos<-(datos-mean(datos))+centro
  return(nuevos_datos)
}

#   Hacer una funcion que tome como argumento el nombre de un archivo y que al aplicar la funcion
#   despliegue tres graficas (minimo, maximo y promedio)
#   vector minimos (graficar minimos)
